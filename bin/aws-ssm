#!/usr/bin/env bash

if [[ ${BASH_VERSINFO[0]} -lt 4 ]]; then
  echo "This script requires Bash version 4 or higher"
  exit 1
fi

if ! command -v aws &> /dev/null; then
  echo "AWS CLI is not installed"
  exit 1
fi

if ! command -v fzf &> /dev/null; then
  echo "fzf is not installed"
  exit 1
fi

function usage() {
  cat >&2 <<EOF
Utility script to easily connect to an EC2 instance using AWS SSM.

$(tput bold)$(tput smul)Usage$(tput sgr0): $(basename $0) [-h] [-p remote_port:local_port] [profile] [instance]

$(tput bold)$(tput smul)Options$(tput sgr0):
  $(tput bold)-h$(tput sgr0)                             Display help
  $(tput bold)-p <remote_port>:<local_port>$(tput sgr0)  Port forwarding option (e.g. 80:8080)

$(tput bold)$(tput smul)Examples$(tput sgr0):
  $(basename $0)
    Start interactive AWS profile selection, then interactive instance selection.

  $(basename $0) your-profile
    Start interactive instance selection using the specified AWS profile.

  $(basename $0) -h
    Display this help message.

  $(basename $0) -p 80:8080
    Start interactive AWS profile selection, then interactive instance selection
    and port forwarding to the specified local port for the selected instance.

  $(basename $0) your-profile my-instance
    Start ssh session using the specified AWS profile and the instance.

  $(basename $0) -p 80:8080 your-profile my-instance
    Start port forwarding to the specified local port for the selected instance
EOF
}

while getopts ":hp:" opt; do
  case $opt in
    h)
      usage
      exit 0
      ;;
    p)
      PORT_FORWARDING_OPTION=$OPTARG
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      echo ""
      usage
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      echo ""
      usage
      exit 1
      ;;
  esac
done

shift $((OPTIND - 1))

PROFILE=$1

if [[ -z $PROFILE ]]; then
  PROFILE=$(
    aws configure list-profiles \
      | sort -rg \
      | fzf --prompt="profile > " --preview "
        aws --profile {} ec2 describe-instances --output text --no-cli-pager \\
          --query 'Reservations[].Instances[?State.Name==\`running\`].[Tags[?Key==\`Name\`].Value]'
      "
    )
fi

if [[ -z $PROFILE ]]; then
  echo "No profile selected"
  echo ""
  usage
  exit 1
fi

export AWS_PROFILE=$PROFILE

typeset -A INSTANCES="($(
  aws ec2 describe-instances --output text --no-cli-pager --query "
    Reservations[].Instances[?State.Name=='running'][].[Tags[?Key=='Name'].Value | [0], InstanceId]
  "))"

SELECTED=$2

if [[ -n $SELECTED ]]; then
  SELECTED=$(printf '%s\n' "${!INSTANCES[@]}" | sort -rg | fzf -q "$SELECTED" -0 -1)
else
  SELECTED=$(printf '%s\n' "${!INSTANCES[@]}" | sort -rg | fzf --prompt="instance > ")
fi

if [[ -z $SELECTED ]]; then
  echo "No instance selected"
  echo ""
  usage
  exit 1
fi

INSTANCE_ID=${INSTANCES[$SELECTED]}

if [[ -z $INSTANCE_ID ]]; then
  echo "No instance found for $SELECTED"
  echo ""
  usage
  exit 1
fi

C_RED=$(tput setaf 1)
C_GREEN=$(tput setaf 2)

C_SELECTED=$(if [[ $SELECTED == *prod* ]]; then echo $C_RED; else echo $C_GREEN; fi)

echo -e "Connecting to $(tput bold)${C_SELECTED}${SELECTED}$(tput sgr0) ($INSTANCE_ID)..."

if [[ -z $PORT_FORWARDING_OPTION ]]; then
  aws ssm start-session \
    --target $INSTANCE_ID
else
  REMOTE_PORT=$(echo $PORT_FORWARDING_OPTION | cut -d : -f 1)
  LOCAL_PORT=$(echo $PORT_FORWARDING_OPTION | cut -d : -f 2)

  if [[ -z $REMOTE_PORT ]] \
    || [[ -z $LOCAL_PORT ]] \
    || ! [[ $REMOTE_PORT =~ ^[0-9]+$ ]] \
    || ! [[ $LOCAL_PORT =~ ^[0-9]+$ ]]; then
    echo "Port-forwarding options is invalid: \"$PORT_FORWARDING_OPTION\""
    echo ""
    usage
    exit 1
  fi

  echo "Port-forwarding: $REMOTE_PORT -> $LOCAL_PORT"

  aws ssm start-session \
    --target $INSTANCE_ID \
    --document-name AWS-StartPortForwardingSession \
    --parameters "{\"portNumber\":[\"$REMOTE_PORT\"],\"localPortNumber\":[\"$LOCAL_PORT\"]}"
fi
